(define/contract (minimum-sum nums)
  (-> (listof exact-integer?) exact-integer?)

  (define (valid-triplet? i j k)
    (and (< (list-ref nums i) (list-ref nums j))
         (> (list-ref nums j) (list-ref nums k))))

  (define (find-min-sum)
    (let ([n (length nums)])
      (define s #f)  
      (for ([i (in-range n)])
        (for ([j (in-range (add1 i) n)])
          (for ([k (in-range (add1 j) n)])
            (when (valid-triplet? i j k)
              (set! s (if (or (not s) (< (+ (list-ref nums i) 
                                             (list-ref nums j) 
                                             (list-ref nums k)) 
                                          s))
                          (+ (list-ref nums i) 
                             (list-ref nums j) 
                             (list-ref nums k))
                          s))))))
      (if s s -1)))

  (find-min-sum))
